name: CI
on:
  push:
  pull_request:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: rustup component add clippy
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build-linux:
    name: Build Linux
    needs:
      - check
      - test
      - fmt
      - clippy
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Upload Linux Builds
        uses: actions/upload-artifact@v1
        with:
          name: linux-builds
          path: ./target/release/pxcmprs-server

  docker:
    name: Docker
    needs:
      - check
      - test
      - fmt
      - clippy
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cut -d "#" -f2 <<< $(cargo pkgid))
        shell: bash

      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          VERSION: ${{ env.VERSION }}
        with:
          name: thepiconerd/pxcmprs-server
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: "latest,v${{ env.VERSION }}"

  upload:
    name: Upload
    needs:
      - build-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Download Linux Builds
        uses: actions/download-artifact@v1
        with:
          name: linux-builds
          path: ./linux

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cut -d "#" -f2 <<< $(cargo pkgid))
        shell: bash

      - name: Upload Linux Release
        id: upload-linux-asset
        uses: softprops/action-gh-release@v1
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            linux/pxcmprs-server
